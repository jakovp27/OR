{
   "openapi": "3.1.0",
   "info": {
      "title": "Košarkaši",
      "version": "1.0",
      "contact": {
         "name": "Jakov Prister",
         "email": "jp52783@fer.hr"
      },
      "licence": "MIT"
   },
   "paths": {
      "/players": {
         "get": {
            "summary": "Get all players from database",
            "description": "Returns all players",
            "produces": [
               "application/json"
            ],
            "responses": {
               "200": {
                  "description": "Fetch successfull",
                  "schema": {
                     "$ref": "#/definitions/Player"
                  }
               }
            }
         },
         "post": {
            "summary": "Add new player to database",
            "description": "Adds new player",
            "produces": [
               "application/json"
            ],
            "responses": {
               "200": {
                  "description": "Successfully added",
                  "schema": {
                     "$ref": "#/definitions/Player"
                  }
               },
               "400": {
                  "description": "New player is not in good format"
               }
            }
         },
         "put": {
            "summary": "Updates player in database",
            "description": "Updates player",
            "produces": [
               "application/json"
            ],
            "responses": {
               "200": {
                  "description": "Successfully added",
                  "schema": {
                     "$ref": "#/definitions/Player"
                  }
               },
               "400": {
                  "description": "Updated player is not in good format"
               },
               "404": {
                  "description": "Updated player must have existing id"
               }
            }
         }
      },
      "/players/{id}": {
         "get": {
            "summary": "Gets player from database by ID",
            "description": "Returns a single player from database",
            "produces": [
               "application/json"
            ],
            "parameters": [
               {
                  "name": "id",
                  "in": "path",
                  "description": "ID of the resource",
                  "required": true,
                  "type": "integer",
                  "format": "int64"
               }
            ],
            "responses": {
               "200": {
                  "description": "Fetch successfull",
                  "schema": {
                     "$ref": "#/definitions/Player"
                  }
               },
               "400": {
                  "description": "Invalid ID, ID must be number"
               },
               "404": {
                  "description": "Player with ID not found"
               }
            }
         },
         "delete": {
            "summary": "Deletes player from database by ID",
            "description": "Deletes a single player from database",
            "produces": [
               "application/json"
            ],
            "parameters": [
               {
                  "name": "id",
                  "in": "path",
                  "description": "ID of the resource",
                  "required": true,
                  "type": "integer",
                  "format": "int64"
               }
            ],
            "responses": {
               "200": {
                  "description": "Deleted successfully",
                  "schema": {
                     "$ref": "#/definitions/Player"
                  }
               },
               "400": {
                  "description": "Invalid ID, ID must be number"
               },
               "404": {
                  "description": "Player with ID not found"
               }
            }
         }
      },
      "/players/surname/{surname}": {
         "get": {
            "summary": "Gets player from database by surname",
            "description": "Returns a single player from database",
            "produces": [
               "application/json"
            ],
            "parameters": [
               {
                  "name": "surname",
                  "in": "path",
                  "description": "Surname of the player",
                  "required": true,
                  "type": "integer",
                  "format": "int64"
               }
            ],
            "responses": {
               "200": {
                  "description": "Fetch successfull",
                  "schema": {
                     "$ref": "#/definitions/Player"
                  }
               },
               "400": {
                  "description": "Invalid surname, name must be string"
               },
               "404": {
                  "description": "Player with surname not found"
               }
            }
         }
      },
      "/players/position/{position}": {
         "get": {
            "summary": "Gets players from database that are plying at given position",
            "description": "Returns players playing at given position",
            "produces": [
               "application/json"
            ],
            "parameters": [
               {
                  "name": "position",
                  "in": "path",
                  "description": "Position of the player",
                  "required": true,
                  "type": "integer",
                  "format": "int64"
               }
            ],
            "responses": {
               "200": {
                  "description": "Fetch successfull",
                  "schema": {
                     "$ref": "#/definitions/Player"
                  }
               },
               "400": {
                  "description": "Invalid position, position must be string"
               },
               "404": {
                  "description": "Player playing at given position not found"
               }
            }
         }
      },
      "/openapi": {
         "get": {
            "summary": "Gets openapi",
            "description": "Returns openapi",
            "produces": [
               "application/json"
            ],
            "responses": {
               "200": {
                  "description": "Fetch successfull",
                  "schema": {
                     "$ref": "#/definitions/Openapi"
                  }
               }
            }
         }
      }

   }
}
